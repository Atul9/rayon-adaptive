to_sequential in interruptible adaptive scheduler + help ?? -> everywhere using checked_lenght
- cap: default policy + check tasks of sizes 0 are not stolen but discarded immediately

- if we use reduced_iter and then parallel reduction on each block then ByBlocks is asked twice for sizes
   is it a big deal ?

- double check the divide_at(0) in help_work is not needed in help.rs even with special iterators like folders

   ----> isn't it better to just go away from the move api ?
       go from divide(self) -> (Self, Self) to divide(&mut self) -> Self

       we will then have the same problems as slice's IterMut with lifetimes (currently extract_iter forced us to switch to options
       in order to divide without borrowing).

   so the debate is between move api and no pb with lifetimes but pb with drop and the borrow api with the reversed problems.
   ***********
   ANYWAY we cannot and should not drop on parallel iterators because the real drop should be done on the final sequential iterator.
   so: let's stick to moving divides. we can get some convenience functions for borrow_divide.
   ***********


*** api changes to discuss:
  - do all Fn implement Clone ? is Sync better than Send (if we go to Arc)
  - unsafety of successors
     -> we can maybe implement it safely using associated lifetimes in the traits
     but there is currently several problems:
        * Retriever needs to be a streaming iterator
           -> could we flatten it into an iterator ?
        * what is the prototype of map's F ?
          -> we need F to be for<'a>
        * flat_map: more lifetime issues
        * reduction pb : strange borrow in the scheduler's try_fold
